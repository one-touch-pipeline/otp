---
# Copyright 2011-2019 The OTP authors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This is the entry point for gitlab ci on gitlab.com
# It includes:
# - .gitlab-ci-core.yml with default jobs
# - .gitlab-ci-merge-request.yml with merge request automation jobs
# - the template: Dependency-Scanning and License-Scanning

include:
  - local: '.gitlab-ci-core.yml'
  - local: '.gitlab-ci-create-image.yml'
  - local: '.gitlab-ci-merge-request.yml'
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml

variables:
  DS_EXCLUDED_ANALYZERS: "gemnasium-python"
  DS_JAVA_VERSION: 17
  DS_MAX_DEPTH: -1


# ------------------------------------------------------
# jobs stage scanning
# ------------------------------------------------------

.only-branch:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH

gemnasium-dependency_scanning:
  stage: scanning
  dependencies: [ ]
  needs: [ ]
  rules:
    - !reference [ .only-branch, rules ]
  script:
    - /analyzer run


gemnasium-maven-dependency_scanning:
  stage: scanning
  dependencies: [ ]
  needs: [ ]
  rules:
    - !reference [ .only-branch, rules ]
  script:
    - /analyzer run

license_scanning:
  stage: scanning
  dependencies: [ ]
  needs: [ ]
  image:
    name: registry.gitlab.com/gitlab-org/security-products/analyzers/license-finder:latest
    entrypoint: [ "" ]
  variables:
    LM_REPORT_VERSION: "2.1"
    CI_PROJECT_DIR: "."
    LM_JAVA_VERSION: "11"
  rules:
    - !reference [ .only-branch, rules ]
  script:
    - /run.sh analyze .
  artifacts:
    paths:
      - gl-license-scanning-report.json
    reports:
      license_scanning: gl-license-scanning-report.json

new licenses:
  image: groovy:3.0-jdk17-alpine
  stage: scanning
  needs: ["license_scanning"]
  rules:
    - !reference [.only-branch, rules]
  dependencies:
    - license_scanning
  script:
    - groovy devScripts/gitlab-ci/license-checker/findNewLicenses.groovy
