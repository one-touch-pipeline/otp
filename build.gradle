/*
 * Copyright 2011-2019 The OTP authors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import grails.util.Environment

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.8"
        classpath "com.bertramlabs.plugins:less-asset-pipeline:2.15.1"
        classpath 'org.grails.plugins:database-migration:3.0.4'
    }
}

plugins {
    id "com.gorylenko.gradle-git-properties" version "2.0.0"
    id "com.github.monosoul.markdown.page.generator" version "2.1.0.1"
}

group "de.dkfz.tbi"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:"codenarc"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://jitpack.io" }
}

sourceSets {
    testHelper {
        groovy {
            srcDirs {
                "src/test-helper/groovy"
            }
        }
        compileClasspath += main.runtimeClasspath
    }
    test {
        compileClasspath += sourceSets.testHelper.output
        runtimeClasspath += sourceSets.testHelper.output
    }

    workflowTest {
        groovy {
            srcDirs {
                "src/workflow-test/groovy"
            }
        }
        compileClasspath += main.runtimeClasspath + testHelper.output + integrationTest.runtimeClasspath
        runtimeClasspath += main.runtimeClasspath + testHelper.output + integrationTest.runtimeClasspath

        File r = new File(project.projectDir, "grails-app/conf")
        resources.srcDir(r)
    }
    main {
        resources {
            srcDirs 'migrations'
        }
    }

    script {
        groovy {
            srcDirs {
                "scripts"
            }
        }
        compileClasspath += main.runtimeClasspath
    }
}

task workflowTest(type: Test) {
    testClassesDirs = sourceSets.workflowTest.output.classesDirs
    classpath = sourceSets.workflowTest.runtimeClasspath
    reports.html.enabled = false
    testLogging.showStandardStreams = true
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    shouldRunAfter "integrationTest"
    systemProperty "grails.env", "WORKFLOW_TEST" // change to TEST??
}

dependencies {
    integrationTestCompile sourceSets.testHelper.output
    integrationTestRuntime sourceSets.testHelper.output

    compile 'org.codehaus.groovy:groovy-all:2.4.15'
    codenarc 'org.codehaus.groovy:groovy-all:2.4.15' // both groovy versions must be the same; required bc we add runtimeClasspath to codenarcClasspath

    // JDBC
    runtime "org.postgresql:postgresql:42.1.4"

    // Dicom Audit Logging
    if (Environment.isDevelopmentMode()) {
        compile "com.gitlab.one-touch-pipeline:dicom-audit-trail-impl:v1.1.0-NOP"
    } else {
        compile "com.gitlab.one-touch-pipeline:dicom-audit-trail-impl:1.1.0"
    }
    compile "com.gitlab.one-touch-pipeline:dicom-audit-trail:1.2.0"

    // bioinformatics tools
    compile "com.google.code.gson:gson:2.2.4"
    compile "com.github.broadinstitute:picard:1.134"
    compile "com.gitlab.one-touch-pipeline:bedutils:0.0.8"
    compile 'com.github.samtools:htsjdk:2.12.0'

    // general dependencies
    compile "joda-time:joda-time:2.3"
    compile "org.jadira.usertype:usertype.jodatime:2.0.1"
    compile "com.opencsv:opencsv:4.4"

    compile "org.grails:grails-async-gpars:3.3.2"

    // library for interacting with cluster job schedulers
    compile('com.github.theroddywms:BatchEuphoria:0.0.7') {
        exclude group: 'org.apache.commons', module: 'commons-io'
    }

    // ssh, ssh-agent proxy, and sftp libraries
    compile "com.jcraft:jsch:0.1.54"
    compile "com.jcraft:jsch.agentproxy.jsch:0.0.9"
    compile "com.jcraft:jsch.agentproxy.connector-factory:0.0.9"
    compile 'com.github.robtimus:sftp-fs:1.2.1'

    // library for easy HTML editing
    compile "org.jsoup:jsoup:1.9.2"

    compile "org.grails.plugins:spring-security-core:3.2.3"
    compile "org.grails.plugins:spring-security-ldap:3.0.2"
    compile "org.grails.plugins:spring-security-acl:3.2.1"

    compile "org.grails.plugins:grails-console:2.1.1"
    compile "org.grails.plugins:mail:2.0.0"

    // create default data
    compile "com.bertramlabs.plugins:seed-me:3.1.6"
    compile "org.grails:grails-datastore-gorm-async" // seed-me fails without this dependency

    compile "org.grails.plugins:database-migration:3.0.4"
    compile 'org.liquibase:liquibase-core:3.5.5'

    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.8"
    compile "com.bertramlabs.plugins:less-asset-pipeline:2.15.1"

    compile 'org.codenarc:CodeNarc:1.4'

    // Grails Defaults
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.5.Final"
    compile "org.hibernate:hibernate-ehcache:5.1.5.Final"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb:1.1.2"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:2.47.1"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

    testCompile "org.grails:grails-test-mixins:3.3.0"

    // JS libraries
    compile 'org.webjars:bootstrap:3.3.5'
    compile 'org.webjars:jquery:1.11.1'
    compile 'org.webjars:rgraph:4.66-stable'
    compile 'org.webjars:jquery-ui:1.10.4-1'
    compile 'org.webjars:select2:4.0.7'
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
    testLogging {
        exceptionFormat = 'full'
    }
}

assets {
    minifyJs = true
    minifyCss = true
}

codenarc {
    toolVersion = '1.3'
    configFile file('grails-app/conf/CodeNarcRuleSet.groovy')
    maxPriority1Violations = 0
    maxPriority2Violations = 900
    maxPriority3Violations = 7350
}

task showCodenarcHTMLFile(type: Exec) {
    commandLine 'echo', "File can be found under: file://${project.projectDir}/build/reports/codenarc/all.html"
}

task codenarcAll(type: CodeNarc) {
    mustRunAfter clean
    finalizedBy showCodenarcHTMLFile
    reports {
        text.enabled = true
        html.enabled = true
    }
    sourceSets.each { SourceSet s ->
        if (s.name != "script") {
            source(s.allGroovy.getSrcDirs())
        }
    }

    group = LifecycleBasePlugin.VERIFICATION_GROUP
}

tasks.withType(CodeNarc) {
    sourceSets.each { SourceSet s ->
        if (s.name != "script") {
            codenarcClasspath += s.runtimeClasspath  // required for ast transformations -> too many dependencies, because of this line we have to
            // set groovy dependency explicitly
            compilationClasspath += s.runtimeClasspath //too many dependencies for codenarc tasks except all
        }
    }
}

processResources {
    from('src/seed') {into 'seed'}
}

war {
    archiveName = 'otp.war'
}


/* Documentation Tasks */

task ensureDocsBuildDirs {
    doLast {
        mkdir "$buildDir/docs/users"
        mkdir "$buildDir/docs/images"
    }
}

task copyCss(type: Copy) {
    from "docs/css"
    into "$buildDir/docs/css"
}

task copyHtml(type: Copy) {
    from "docs/html/"
    into "$buildDir/docs"
}

generateHtml {
    dependsOn(ensureDocsBuildDirs)
    dependsOn(copyHtml)
    dependsOn(copyCss)

    pegdownExtensions = "TABLES, TOC"
    ext.encoding = "UTF-8"
    recursiveInput = true
    inputEncoding = ext.encoding
    outputEncoding = ext.encoding
    inputDirectory = new File("docs/users")
    outputDirectory = new File(buildDir, "docs/users")

    transformRelativeMarkdownLinks = true
    headerHtmlFile = new File("docs/support/header.html")
    footerHtmlFile = new File("docs/support/footer.html")
}
