/*
 * Copyright 2011-2019 The OTP authors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import com.gradle.scan.plugin.PublishedBuildScan
import grails.util.Environment
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

import static java.util.concurrent.TimeUnit.SECONDS

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails.plugins:hibernate5:8.0.0"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:4.3.0"
        classpath "com.bertramlabs.plugins:less-asset-pipeline:4.3.0"
        classpath "com.bertramlabs.plugins:sass-asset-pipeline:4.3.0"
        classpath 'org.grails.plugins:database-migration:4.2.0'
    }
}

plugins {
    id "com.github.monosoul.markdown.page.generator" version "2.4.0.0"
    id "org.openapi.generator" version "7.0.0"
    id "com.github.node-gradle.node" version "7.0.0"
    // plugin to calculate coverage
    id 'jacoco'
    // plugin to convert the jacoco report in the the cobertura format, needed by gitlab.com
    // https://github.com/razvn/jacoco-to-cobertura-gradle-plugin
    id "net.razvan.jacoco-to-cobertura" version "1.2.0"
    // plugin to show total jacoco coverage on the console
    // https://gitlab.com/barfuin/gradle-jacoco-log
    id 'org.barfuin.gradle.jacocolog' version '3.1.0'

}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
    if (System.getenv('PUBLISH_SCAN') == '1') {
        publishAlways()
        String commitId = 'git rev-parse --verify HEAD'.execute().text.trim()
        String gitlabUrl = "https://gitlab.com/one-touch-pipeline/otp"
        value 'Git Commit ID', commitId
        buildScan.link 'Source', "$gitlabUrl/-/commit/$commitId"
        buildScanPublished { PublishedBuildScan scan ->
            file("$buildDir/scan-journal.log") << "${new Date()} - ${scan.buildScanId} - ${scan.buildScanUri}\n"
        }
    }
}

group "de.dkfz.tbi"

apply plugin: 'java'
apply plugin: "idea"
apply plugin: "war"
apply plugin: "org.grails.grails-web"
apply plugin: "com.bertramlabs.asset-pipeline"
apply plugin: "org.grails.grails-gsp"
apply plugin: "codenarc"

sourceCompatibility = 17

compileGroovy.groovyOptions.configurationScript = file('gradle/config/groovyc.groovy')

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://jitpack.io" }
}

sourceSets {
    testHelper {
        groovy {
            srcDirs {
                "src/test-helper/groovy"
            }
        }
        compileClasspath += main.runtimeClasspath
    }
    test {
        compileClasspath += sourceSets.testHelper.output
        runtimeClasspath += sourceSets.testHelper.output
    }

    workflowTest {
        groovy {
            srcDirs {
                "src/workflow-test/groovy"
            }
        }
        compileClasspath += main.runtimeClasspath + testHelper.output
        runtimeClasspath += main.runtimeClasspath + testHelper.output

        File r = new File(project.projectDir, "grails-app/conf")
        resources.srcDir(r)
    }
    main {
        resources {
            srcDirs 'migrations', "$buildDir/version"
        }
    }

    script {
        groovy {
            srcDirs {
                "scripts"
            }
        }
        compileClasspath += main.runtimeClasspath
    }
}

def generatedSourcesDir = "$buildDir/generated/openapi"
task generateWes(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "java"
    library = "webclient"
    inputSpec = "${sourceSets.main.resources.srcDirs[0]}/wes-api/workflow_execution_service.swagger.yaml"
    configFile = "${sourceSets.main.resources.srcDirs[0]}/wes-api/workflow_execution_service.swagger.config.json"
    outputDir = generatedSourcesDir
    configOptions = [
            dateLibrary    : "java17",
            openApiNullable: "false"
    ]
}
task generateOpenApi(dependsOn: ['generateWes'])
compileJava.dependsOn tasks.generateOpenApi
processResources.dependsOn tasks.generateOpenApi
sourceSets.main.java.srcDir "${generatedSourcesDir}/src/main/java"
sourceSets.main.resources.srcDir "${generatedSourcesDir}/src/main/resources"


Closure filterCoverage = { classDirectories ->
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
                "**/*Controller*",
                "**/*Command*",
                "*Visitor*",
                "*Rule*",
                "io/swagger/client/wes/**",
        ])
    }))
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    doLast {
        println "Coverage unit report is created in file://${project.projectDir}/build/reports/jacoco/test/html/index.html"
    }
    afterEvaluate {
        filterCoverage(classDirectories)
    }
}

task jacocoIntegrationTestReport(type: JacocoReport) {
    dependsOn integrationTest // tests are required to run before generating the report
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    executionData integrationTest
    sourceSets sourceSets.main
    shouldRunAfter "jacocoTestReport"
    reports {
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/integrationTest')
    }
    afterEvaluate {
        filterCoverage(classDirectories)
    }

    doLast {
        println "Coverage integration report is created in file://${project.projectDir}/build/reports/jacoco/integrationTest/index.html"
    }
}

task jacocoAllTestReport(type: JacocoReport) {
    dependsOn test, integrationTest // tests are required to run before generating the report
    executionData test, integrationTest
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    sourceSets sourceSets.main
    reports {
        xml.required = true
        xml.outputLocation = file('build/reports/jacoco/allTest/jacoco.xml')
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/allTest')
    }
    afterEvaluate {
        filterCoverage(classDirectories)
    }

    doLast {
        println "Coverage unit & integration report is created in file://${project.projectDir}/build/reports/jacoco/allTest/index.html"
    }
}

jacocoToCobertura {
    dependsOn jacocoAllTestReport
    splitByPackage.set(true)
    inputFile.set(layout.buildDirectory.file("reports/jacoco/allTest/jacoco.xml"))
    outputFile.set(layout.buildDirectory.file("reports/jacocoToCobertura/cobertura.xml"))
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}


integrationTest {
    useJUnitPlatform()
    finalizedBy jacocoIntegrationTestReport // report is always generated after tests run
    boolean usePostgresDocker = "TRUE".equalsIgnoreCase(System.getenv('USE_POSTGRES'))
    systemProperty "usePostgresDocker", usePostgresDocker.toString()

    if (usePostgresDocker) {
        List<String> dcs = []
        doFirst {
            println "use postgres docker"

            // Where is docker-compose?
            String dockerCompose = '/usr/bin/which docker-compose'.execute()?.text?.trim()
            if (!dockerCompose) {
                throw new IllegalStateException('Unable to find docker-compose. Is it installed and available via PATH?')
            }

            List<String> dockerPorts = (0..maxParallelForks - 1).collect {

                // Setup the project name for use by the Continuous Integration server the prevent race conditions.
                String projectName = "--project-name otptest-build-${System.getenv('BUILD_NUMBER') ?: 'DEFAULT'}-w-${it}"

                // Construct command string
                String dc = "${dockerCompose} ${projectName} --file docker/otp-test/docker-compose.yml"
                dcs << dc

                //cleanup in case the container still exist
                "${dc} stop".execute().waitFor()
                "${dc} rm -f".execute().waitFor()

                // Start a fresh container
                if ("${dc} up -d".execute().waitFor() != 0) {
                    throw new IllegalStateException('Unable to start new database container.')
                }
                // Get the (dynamically assigned local) port
                def dockerProcess = "${dc} port integration 5432".execute()
                // If we do not get a reply in time or the return code indicates a failure, fail.
                if (!dockerProcess.waitFor(5, SECONDS) || dockerProcess.exitValue() != 0) {
                    throw new IllegalStateException('Unable to get port information from Docker. Is the test database container running?')
                }
                String dockerPort = dockerProcess.text.split(':').last().trim() // should work for IPv6 also
                return dockerPort
            }

            systemProperty "maxParallelForks", maxParallelForks
            systemProperty "dockerPorts", dockerPorts.join(',')
        }

        doLast {
            // Stop and destroy the container
            dcs.each { dc ->
                "${dc} stop".execute().waitFor()
                "${dc} rm -f".execute().waitFor()
            }
        }
    } else {
        doFirst {
            println "use h2 database"
        }
    }
}

task workflowTest(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.workflowTest.output.classesDirs
    classpath = sourceSets.workflowTest.runtimeClasspath
    reports.html.enabled = true
    testLogging.showStandardStreams = true
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    shouldRunAfter "integrationTest"
    systemProperty "grails.env", "WORKFLOW_TEST" // change to TEST??
}

tasks.withType(GroovyCompile).configureEach {
    options.incremental = true
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }

    all {
        exclude group: 'org.webjars', module: 'popper.js'    // exclude popper.js, since the correct version is already imported within bootstrap.bundle
    }
}

dependencies {
    // Grails Defaults
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    console "org.grails:grails-console"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:events"
    implementation "org.grails.plugins:hibernate5:8.0.0"
    implementation "org.hibernate:hibernate-core:5.4.33.Final"
    implementation "org.grails.plugins:gsp"
    implementation "javax.mail:javax.mail-api:1.6.2"
    profile "org.grails.profiles:web"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "org.apache.tomcat:tomcat-jdbc"
    runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:4.3.0"
    runtimeOnly "com.bertramlabs.plugins:less-asset-pipeline:4.3.0"
    runtimeOnly "com.bertramlabs.plugins:sass-asset-pipeline:4.3.0"
    testImplementation "org.grails:grails-gorm-testing-support:3.0.0"
    testImplementation "org.grails:grails-web-testing-support:3.0.0"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.10.0"
    workflowTestImplementation "org.grails:grails-gorm-testing-support:3.0.0"
    workflowTestImplementation "org.grails:grails-web-testing-support:3.0.0"
    workflowTestRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.10.0"

    // JDBC
    runtimeOnly 'org.postgresql:postgresql:42.6.0'

    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'org.springframework.security:spring-security-core:5.8.5'
    implementation 'org.springframework.security:spring-security-oauth2-jose:5.8.5'
    implementation 'org.springframework.security:spring-security-config:5.8.5'
    implementation 'org.springframework.security:spring-security-web:5.8.5'
    implementation 'org.springframework.security:spring-security-ldap:5.8.5'
    implementation 'org.springframework.security:spring-security-oauth2-client:5.8.5'

    implementation "org.openapitools:openapi-generator-gradle-plugin:7.0.0"

    integrationTestImplementation sourceSets.testHelper.output
    integrationTestRuntimeOnly sourceSets.testHelper.output

    implementation "org.jadira.usertype:usertype.core:7.0.0.CR1"
    implementation "com.opencsv:opencsv:5.8"

    implementation "org.grails:grails-async-gpars:4.0.0"

    // bioinformatics tools
    implementation "com.gitlab.one-touch-pipeline:bedutils:0.0.8"
    implementation "com.github.samtools:htsjdk:4.0.1"

    // library for interacting with cluster job schedulers
    implementation('com.github.theroddywms:BatchEuphoria:0.1.4')

    // ssh, ssh-agent proxy, and sftp libraries
    implementation 'com.jcraft:jsch:0.1.55'
    implementation "com.jcraft:jsch.agentproxy.jsch:0.0.9"
    implementation "com.jcraft:jsch.agentproxy.connector-factory:0.0.9"
    implementation 'com.github.robtimus:sftp-fs:3.2'

    // library for easy HTML editing
    implementation 'org.jsoup:jsoup:1.16.1'

    implementation 'com.networknt:json-schema-validator:1.0.86'

    implementation "org.grails.plugins:grails-console:2.1.1"
    implementation "org.grails.plugins:mail:3.0.0"

    implementation ("org.grails.plugins:database-migration:4.2.0") {
        exclude group: "org.grails", module: "grails-shell"
    }
    implementation 'org.liquibase:liquibase-core:4.19.0'

    implementation 'org.codenarc:CodeNarc:3.2.0'

    // JS and CSS libraries
    implementation 'org.webjars:jquery:3.7.0'
    implementation 'org.webjars:bootstrap:4.6.0'
    implementation 'org.webjars.npm:bootstrap-icons:1.10.5'
    implementation 'org.webjars.npm:ttskch__select2-bootstrap4-theme:1.5.2'
    implementation 'org.webjars:select2:4.0.13'
    implementation 'org.webjars:datatables:1.13.5'
    implementation 'org.webjars:datatables-buttons:2.4.1'
    implementation 'org.webjars:datatables-fixedcolumns:3.2.2'
    implementation 'org.webjars:datatables-fixedheader:3.2.4'
    implementation 'org.webjars.bowergithub.datatables:dist-datatables-scroller:2.2.0'
    implementation 'org.webjars.bowergithub.datatables:dist-datatables-scroller-bootstrap4:2.2.0'
    implementation 'org.webjars:datatables-plugins:1.13.6'
    implementation 'org.webjars.npm:corejs-typeahead:1.3.1'
    implementation 'org.webjars.npm:chartjs-plugin-datalabels:2.2.0'
    implementation 'org.webjars.npm:chart.js:4.3.3'
}

task buildInfo {
    def separator = System.getProperty('line.separator')
    def tags = "git tag --points-at HEAD".execute().text.trim()
    def branch = "git branch --show-current".execute().text.trim()
    def commitId = "git log --pretty=format:'%h' -n 1".execute().text.trim()
    mkdir "$buildDir/version"
    def file = new File("$buildDir/version/version.properties")
    file.delete()
    file << "git.tags=$tags$separator"
    file << "git.branch=$branch$separator"
    file << "git.commit.id.abbrev=$commitId$separator"
}

classes.dependsOn buildInfo

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-XX:TieredStopAtLevel=1')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

// required for bootRun on Windows
grails {
    pathingJar = true
}

tasks.withType(Test) {
    maxParallelForks = System.getenv('MAX_PARALLEL_FORKS')?.isInteger() ? System.getenv('MAX_PARALLEL_FORKS') as int : 1
    jvmArgs('-Xms1g', '-Xmx4g')
    testLogging {
        exceptionFormat = TestExceptionFormat.FULL
        afterSuite { desc, result ->
            if (!desc.parent)
                println("${result.resultType} " +
                        "(${result.testCount} tests, " +
                        "${result.successfulTestCount} passed, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped)")
        }
    }
}

assets {
    minifyJs = true
    minifyCss = true
    minifyOptions = [
            languageMode  : 'ES6',
            targetLanguage: 'ES5',
    ]
    excludes = [
            '**/chart.js/**/*',
            '**/chartjs-plugin-datalabels/**/*',
            '**/datatables-fixedcolumns/*/css/fixedColumns.bootstrap4.scss',
            '**/ttskch__select2-bootstrap4-theme/**/*.scss',
            '**/datatables-plugins/**/*',
    ]
}

codenarc {
    toolVersion = '3.2.0'
    configFile file('grails-app/conf/CodeNarcRuleSet.groovy')
    maxPriority1Violations = 0
    maxPriority2Violations = 119
    maxPriority3Violations = 2035
}

task showCodenarcHTMLFile(type: Exec) {
    commandLine 'echo', "File can be found under: file://${project.projectDir}/build/reports/codenarc/all.html"
}

task codenarcAll(type: CodeNarc) {
    mustRunAfter clean
    finalizedBy showCodenarcHTMLFile
    reports {
        text.enabled = true
        html.enabled = true
    }
    sourceSets.each { SourceSet s ->
        if (s.name != "script") {
            source(s.allGroovy.srcDirs)
        }
    }

    group = LifecycleBasePlugin.VERIFICATION_GROUP
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs += ['-Xmx4096m', '-Dgroovy.antlr4=false']
    }
}

tasks.withType(CodeNarc) {
    sourceSets.each { SourceSet s ->
        if (s.name != "script") {
            // required for ast transformations -> too many dependencies, because of this line we have to set groovy dependency explicitly
            codenarcClasspath += s.runtimeClasspath
            // too many dependencies for codenarc tasks except all
            compilationClasspath += s.runtimeClasspath
        }
    }
}

war {
    archiveName = 'otp.war'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    enabled = true
}

/* Documentation Tasks */

task ensureDocsBuildDirs {
    doLast {
        mkdir "$buildDir/docs/users"
        mkdir "$buildDir/docs/images"
    }
}

task copyCss(type: Copy) {
    from "docs/css"
    into "$buildDir/docs/css"
}

task copyHtml(type: Copy) {
    from "docs/html/"
    into "$buildDir/docs"
}

generateHtml {
    dependsOn(ensureDocsBuildDirs)
    dependsOn(copyHtml)
    dependsOn(copyCss)

    pegdownExtensions = "TABLES, TOC"
    ext.encoding = "UTF-8"
    recursiveInput = true
    inputEncoding = ext.encoding
    outputEncoding = ext.encoding
    inputDirectory = new File("docs/md")
    outputDirectory = new File(buildDir, "docs")

    transformRelativeMarkdownLinks = true
    headerHtmlFile = new File("docs/support/header.html")
    footerHtmlFile = new File("docs/support/footer.html")
}

node {
    version = '16.19.0'
    download = true
}

task esLint(type: NpmTask) {
    dependsOn npmInstall
    args = ['run', 'lint']
}

task esLintExport(type: NpmTask) {
    dependsOn npmInstall
    args = ['run', 'lint-export']
}

task esLintExportCi(type: NpmTask) {
    dependsOn npmInstall
    environment = ['CI': 'true']
    args = ['run', 'lint-export']
}

task esLintAutoFix(type: NpmTask) {
    dependsOn npmInstall
    environment = ['CI': 'true']
    args = ['run', 'lint-fix']
}

task runCypressTests(type: NpmTask) {
    doFirst {
        println "Make sure that OTP is running, the connection is configured via environment variable CYPRESS_BASE_URL and credentials are set in cypress.env.json"
    }
    dependsOn npmInstall
    environment = ['CI': 'true']
    args = ['run', 'cy-run']
}

task runCypressTestsInWindow(type: NpmTask) {
    doFirst {
        println "Make sure that OTP is running, the connection is configured via environment variable CYPRESS_BASE_URL and credentials are set in cypress.env.json"
    }
    dependsOn npmInstall
    args = ['run', 'cy-open']
}
