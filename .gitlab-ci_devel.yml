---
# Copyright 2011-2019 The OTP authors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

image: grails:2.5.1

# notes:
## recursive expansion of variables does not work
## having multiple commends in one variable does not work
## putting the expire time to a variable does not work


variables:
  GRAILS_OPTS: '-Xms1G'
  ARTIFACTS_BASE_DIRECTORY: 'artifacts'
  WAR_DIRECTORY: $ARTIFACTS_BASE_DIRECTORY/war
  MAVEN_CACHE: $CI_PROJECT_DIR/.m2
  PREPARE_MAVEN_CACHE1: "mkdir -p $CI_PROJECT_DIR/.m2"
  PREPARE_MAVEN_CACHE2: "ln -s $CI_PROJECT_DIR/.m2 /home/grails/.m2"
  ARTIFACT_DOWNLOAD_ATTEMPTS: "3"
  GET_SOURCES_ATTEMPTS: "3"
  RESTORE_CACHE_ATTEMPTS: "3"



stages:
  - all



#----------------------------
# templates


.abstract base: &base_template
  stage: all
  image: otp-tests
  dependencies: []
  only:
    - branches
  cache:
    key: "${CI_PROJECT_PATH_SLUG}-maven"
    paths:
      - $MAVEN_CACHE
  artifacts: &artifacts_template
    expire_in: 1 week
  before_script:
    - $PREPARE_MAVEN_CACHE1
    - $PREPARE_MAVEN_CACHE2



.abstract test: &test_template
  <<: *base_template
  before_script:
    - echo 'otp.testing.group=othergroup' > /home/grails/.otp.properties
    - $PREPARE_MAVEN_CACHE1
    - $PREPARE_MAVEN_CACHE2
  script:
    - grails test compile --non-interactive
    - "grails test-app --non-interactive $TEST_TYPE: -coverage de.**.*"
  after_script:
    - head -1 target/test-reports/cobertura/coverage.xml
  coverage: /line-rate="\d.(\d\d)\d+"/
  artifacts:
    <<: *artifacts_template
    paths:
      - target/test-reports/*.xml
      - target/test-reports/html/
      - target/test-reports/cobertura/coverage.xml
    when: always


#----------------------------
# jobs

unit tests:
  <<: *test_template
  variables:
    TEST_TYPE: unit



integration tests:
  <<: *test_template
  variables:
    TEST_TYPE: integration



codenarc:
  <<: *base_template
  script:
    - grails compile --non-interactive
    - grails codenarc --non-interactive
  after_script:
    - bashScripts/gitlab-ci/codenarc-informations.sh
  artifacts:
    <<: *artifacts_template
    paths:
      - target/CodeNarc-Report*
    when: always



war:
  <<: *base_template
  artifacts:
    <<: *artifacts_template
    paths:
      - $ARTIFACTS_BASE_DIRECTORY
  before_script:
    - export CI_COMMIT_REF_NAME
    - export CI_COMMIT_SHA
    - echo 'otp.testing.group=othergroup' > /home/grails/.otp.properties
    - mkdir -p logs/jobs
    - $PREPARE_MAVEN_CACHE1
    - $PREPARE_MAVEN_CACHE2
  script:
    - set -e -o pipefail

    - echo $WAR_DIRECTORY
    - export WAR_FILE=$WAR_DIRECTORY/otp.war

    - 'grails war --non-interactive'

    - mkdir -p $WAR_DIRECTORY
    - mv target/otp.war $WAR_DIRECTORY
    - md5sum "$WAR_FILE" | tee "$WAR_FILE.md5"
    - sha256sum "$WAR_FILE" | tee "$WAR_FILE.sha256"
    - git rev-parse HEAD | tee "$WAR_FILE.gitrev"



test migration:
  <<: *base_template
  image: otp-test-migration
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: otp
    POSTGRES_USER: otp
    POSTGRES_PASSWORD: otp
  before_script:
    - echo 'otp.database.server=postgres' >> /home/grails/.otp.properties
    - echo 'otp.database.port=5432' >> /home/grails/.otp.properties
    - echo 'otp.database.database=otp' >> /home/grails/.otp.properties
    - echo 'otp.database.username=otp' >> /home/grails/.otp.properties
    - echo 'otp.database.password=otp' >> /home/grails/.otp.properties
    - $PREPARE_MAVEN_CACHE1
    - $PREPARE_MAVEN_CACHE2
  script:
    - grails compile --non-interactive
    - grails dbm-update --non-interactive
    - bash ./bashScripts/grails-migration-plugin/create-dbm-gorm-diff-without-false-changes.sh testing
    - bash ./bashScripts/grails-migration-plugin/check-for-changelog-file.sh testing
  artifacts:
    <<: *artifacts_template
    paths:
      - migrations/changelogs/*/testing.groovy
    when: on_failure



generate_changelog:
  stage: all
  dependencies: []
  only:
    - branches
  image: otp-generate-changelog
  script:
    - mkdir -p $ARTIFACTS_BASE_DIRECTORY
    - LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
    - echo $LATEST_TAG
    - git config gitchangelog.rc-path scripts/gitchangelog/gitchangelog.rc.reference
    - scripts/gitchangelog/gitchangelog.py ^$LATEST_TAG HEAD >> $ARTIFACTS_BASE_DIRECTORY/CHANGELOG.txt
    - git config gitchangelog.rc-path scripts/gitchangelog/release_notes_gitchangelog.rc.reference
    - scripts/gitchangelog/gitchangelog.py ^$LATEST_TAG HEAD >> $ARTIFACTS_BASE_DIRECTORY/RELEASE_NOTES.txt
    - cat $ARTIFACTS_BASE_DIRECTORY/CHANGELOG.txt
    - cat $ARTIFACTS_BASE_DIRECTORY/RELEASE_NOTES.txt
  artifacts:
    <<: *artifacts_template
    paths:
    - $ARTIFACTS_BASE_DIRECTORY
    when: on_success
