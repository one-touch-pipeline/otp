---
# Copyright 2011-2019 The OTP authors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

image: otp-tests:3.3.9

# notes:
## recursive expansion of variables does not work
## having multiple commends in one variable does not work
## putting the expire time to a variable does not work

variables:
  GRADLE_OPTS: '-Xms4g -Xms1g'
  ARTIFACTS_BASE_DIRECTORY: 'artifacts'
  GRADLE_CACHES: $CI_PROJECT_DIR/.gradle/caches
  GRADLE_WRAPPER: $CI_PROJECT_DIR/.gradle/wrapper
  PREPARE_GRADLE_CACHE1: "mkdir -p $CI_PROJECT_DIR/.gradle/caches $CI_PROJECT_DIR/.gradle/wrapper"
  PREPARE_GRADLE_CACHE2: "ln -s $CI_PROJECT_DIR/.gradle/caches /home/grails/.gradle/caches"
  PREPARE_GRADLE_CACHE3: "ln -s $CI_PROJECT_DIR/.gradle/wrapper /home/grails/.gradle/wrapper"
  ARTIFACT_DOWNLOAD_ATTEMPTS: "3"
  GET_SOURCES_ATTEMPTS: "3"
  RESTORE_CACHE_ATTEMPTS: "3"

stages:
  - status start
  - build
  - test
  - trigger deployment
  - status end

# ------------------------------------------------------
# general templates

.abstract cache: &cache_template
  cache:
    key: "${CI_PROJECT_PATH_SLUG}-cache"
    paths:
      - $GRADLE_CACHES
      - $GRADLE_WRAPPER
  before_script:
    - $PREPARE_GRADLE_CACHE1
    - $PREPARE_GRADLE_CACHE2
    - $PREPARE_GRADLE_CACHE3
    - bashScripts/gitlab-ci/update-Gradle-source.sh

.abstract_trigger: &trigger_template
  image: centos:7
  dependencies: []
  script:
    - if [[ ! -v DEPLOY_PIPELINE_TOKEN || ! -v DEPLOY_PIPELINE_BRANCH || ! -v DEPLOY_PIPELINE_URL ]] ; then exit 0 ; fi
    - curl -X POST
      -F token=$DEPLOY_PIPELINE_TOKEN
      -F ref=$DEPLOY_PIPELINE_BRANCH
      -F "variables[TRIGGER_CI_PIPELINE_ID]=$CI_PIPELINE_ID"
      -F "variables[TRIGGER_CI_JOB_ID]=$CI_JOB_ID"
      -F "variables[TRIGGER_CI_COMMIT_REF_NAME]=$CI_COMMIT_REF_NAME"
      -F "variables[TRIGGER_CI_COMMIT_TAG]=$CI_COMMIT_TAG"
      -F "variables[TRIGGER_CI_COMMIT_SHA]=$CI_COMMIT_SHA"
      -F "variables[TRIGGER_CI_COMMIT_TITLE]=$CI_COMMIT_TITLE"
      -F "variables[TRIGGER_CI_COMMIT_DESCRIPTION]=$CI_COMMIT_DESCRIPTION"
      -F "variables[TRIGGER_CASE]=$TRIGGER_CASE"
      -F "variables[TRIGGER_PIPELINE_STATE]=$TRIGGER_PIPELINE_STATE"
      $DEPLOY_PIPELINE_URL
    - echo send

# ------------------------------------------------------
# job trigger status update start

trigger start:
  <<: *trigger_template
  only:
    - branches
  stage: status start
  variables:
    GIT_STRATEGY: none
    TRIGGER_CASE: status
    TRIGGER_PIPELINE_STATE: start

# ------------------------------------------------------
# job compile

compile:
  <<: *cache_template
  only:
    - branches
    - tags
  stage: build
  dependencies: []
  script:
    - ./gradlew classes

# ------------------------------------------------------
# job tests

unit tests:
  <<: *cache_template
  only:
    - branches
    - tags
  stage: test
  dependencies: []
  script:
    - ./gradlew test
  artifacts:
    paths:
      - build/test-results/test/*.xml
      - build/reports/tests
    expire_in: 4 weeks
    when: always

integration tests:
  <<: *cache_template
  only:
    - branches
    - tags
  stage: test
  dependencies: []
  script:
    - ./gradlew integrationTest
  artifacts:
    paths:
      - build/test-results/integrationTest/*.xml
      - build/reports/tests
    expire_in: 4 weeks
    when: always

codenarc:
  <<: *cache_template
  only:
    - branches
  stage: test
  dependencies: []
  script:
    - ./gradlew codenarcAll
  after_script:
    - bashScripts/gitlab-ci/codenarc-informations.sh
  artifacts:
    paths:
      - build/reports/codenarc
    expire_in: 4 weeks
    when: always

war:
  <<: *cache_template
  only:
    - branches
    - tags
  stage: test
  before_script:
    - $PREPARE_GRADLE_CACHE1
    - $PREPARE_GRADLE_CACHE2
    - $PREPARE_GRADLE_CACHE3
    - bashScripts/gitlab-ci/update-Gradle-source.sh
    - export CI_COMMIT_REF_NAME
    - export CI_COMMIT_SHA
    - mkdir -p logs/jobs
  script:
    - set -e -o pipefail
    - ./gradlew war

test migration:
  <<: *cache_template
  only:
    - branches
    - tags
  stage: test
  dependencies: []
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: otp
    POSTGRES_USER: otp
    POSTGRES_PASSWORD: otp
  before_script:
    - $PREPARE_GRADLE_CACHE1
    - $PREPARE_GRADLE_CACHE2
    - $PREPARE_GRADLE_CACHE3
    - bashScripts/gitlab-ci/update-Gradle-source.sh
    - echo 'otp.database.server=postgres' >> /home/grails/.otp.properties
    - echo 'otp.database.port=5432' >> /home/grails/.otp.properties
    - echo 'otp.database.database=otp' >> /home/grails/.otp.properties
    - echo 'otp.database.username=otp' >> /home/grails/.otp.properties
    - echo 'otp.database.password=otp' >> /home/grails/.otp.properties
  script:
    - ./gradlew dbmUpdate
    - bash ./bashScripts/grails-migration-plugin/create-dbm-gorm-diff-without-false-changes.sh testing
    - bash ./bashScripts/grails-migration-plugin/check-for-changelog-file.sh testing
  artifacts:
    paths:
      - migrations/changelogs/*/testing.groovy
    expire_in: 4 weeks
    when: on_failure

generate_changelog:
  only:
    - branches
    - tags
  stage: test
  dependencies: []
  image: otp-generate-changelog
  script:
    - mkdir -p $ARTIFACTS_BASE_DIRECTORY
    - LATEST_TAG=$(git describe --abbrev=0 --tags --match "v*.*.*" HEAD^)
    - echo $LATEST_TAG
    - git config gitchangelog.rc-path scripts/gitchangelog/gitchangelog.rc.reference
    - scripts/gitchangelog/gitchangelog.py ^$LATEST_TAG HEAD >> $ARTIFACTS_BASE_DIRECTORY/CHANGELOG.txt
    - git config gitchangelog.rc-path scripts/gitchangelog/release_notes_gitchangelog.rc.reference
    - scripts/gitchangelog/gitchangelog.py ^$LATEST_TAG HEAD >> $ARTIFACTS_BASE_DIRECTORY/RELEASE_NOTES.txt
    - cat $ARTIFACTS_BASE_DIRECTORY/CHANGELOG.txt
    - cat $ARTIFACTS_BASE_DIRECTORY/RELEASE_NOTES.txt
  artifacts:
    paths:
      - $ARTIFACTS_BASE_DIRECTORY
    expire_in: 4 weeks
    when: on_success

# ------------------------------------------------------
# job trigger deployment

.abstract_trigger_deployment: &trigger_deployment_template
  <<: *trigger_template
  stage: trigger deployment

trigger master:
  <<: *trigger_deployment_template
  only:
    - /^master$/
  variables:
    GIT_STRATEGY: none
    TRIGGER_CASE: master

trigger release:
  <<: *trigger_deployment_template
  only:
    - /^v\d+\.\d+\.\d+$/
  variables:
    GIT_STRATEGY: none
    TRIGGER_CASE: release

trigger release failed:
  <<: *trigger_deployment_template
  only:
    - /^v\d+\.\d+\.\d+$/
  when: on_failure
  variables:
    GIT_STRATEGY: none
    TRIGGER_CASE: release_failed

# ------------------------------------------------------
# job trigger status update end

trigger success:
  <<: *trigger_template
  only:
    - branches
  stage: status end
  variables:
    GIT_STRATEGY: none
    TRIGGER_CASE: status
    TRIGGER_PIPELINE_STATE: success
  when: on_success


trigger failed:
  <<: *trigger_template
  only:
    - branches
  stage: status end
  variables:
    GIT_STRATEGY: none
    TRIGGER_CASE: status
    TRIGGER_PIPELINE_STATE: failed
  when: on_failure
